{"version":3,"sources":["../../../src/components/marker.js"],"names":["createElement","PropTypes","DraggableControl","propTypes","Object","assign","className","string","longitude","number","isRequired","latitude","defaultProps","Marker","_getPosition","props","offsetLeft","offsetTop","state","dragPos","dragOffset","_getDraggedPosition","_context","viewport","project","x","y","_render","draggable","containerStyle","position","left","top","cursor","ref","_containerRef","style","children"],"mappings":";;AAoBA,SAAQA,aAAR,QAA4B,OAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AAIA,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,gBAAgB,CAACC,SAAnC,EAA8C;AAE9DG,EAAAA,SAAS,EAAEL,SAAS,CAACM,MAFyC;AAI9DC,EAAAA,SAAS,EAAEP,SAAS,CAACQ,MAAV,CAAiBC,UAJkC;AAM9DC,EAAAA,QAAQ,EAAEV,SAAS,CAACQ,MAAV,CAAiBC;AANmC,CAA9C,CAAlB;AASA,MAAME,YAAY,GAAGR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,gBAAgB,CAACU,YAAnC,EAAiD;AACpEN,EAAAA,SAAS,EAAE;AADyD,CAAjD,CAArB;AAiBA,eAAe,MAAMO,MAAN,SAAqBX,gBAArB,CAAmD;AAIhEY,EAAAA,YAAY,GAAqB;AAAA,wBACsB,KAAKC,KAD3B;AAAA,UACxBP,SADwB,eACxBA,SADwB;AAAA,UACbG,QADa,eACbA,QADa;AAAA,UACHK,UADG,eACHA,UADG;AAAA,UACSC,SADT,eACSA,SADT;AAAA,wBAED,KAAKC,KAFJ;AAAA,UAExBC,OAFwB,eAExBA,OAFwB;AAAA,UAEfC,UAFe,eAEfA,UAFe;;AAK/B,QAAID,OAAO,IAAIC,UAAf,EAA2B;AACzB,aAAO,KAAKC,mBAAL,CAAyBF,OAAzB,EAAkCC,UAAlC,CAAP;AACD;;AAP8B,gCAUlB,KAAKE,QAAL,CAAcC,QAAd,CAAuBC,OAAvB,CAA+B,CAAChB,SAAD,EAAYG,QAAZ,CAA/B,CAVkB;AAAA;AAAA,QAU1Bc,CAV0B;AAAA,QAUvBC,CAVuB;;AAW/BD,IAAAA,CAAC,IAAIT,UAAL;AACAU,IAAAA,CAAC,IAAIT,SAAL;AACA,WAAO,CAACQ,CAAD,EAAIC,CAAJ,CAAP;AACD;;AAEDC,EAAAA,OAAO,GAAG;AAAA,yBACuB,KAAKZ,KAD5B;AAAA,UACDT,SADC,gBACDA,SADC;AAAA,UACUsB,SADV,gBACUA,SADV;AAAA,UAEDT,OAFC,GAEU,KAAKD,KAFf,CAEDC,OAFC;;AAAA,+BAIO,KAAKL,YAAL,EAJP;AAAA;AAAA,UAIDW,CAJC;AAAA,UAIEC,CAJF;;AAMR,UAAMG,cAAc,GAAG;AACrBC,MAAAA,QAAQ,EAAE,UADW;AAErBC,MAAAA,IAAI,EAAEN,CAFe;AAGrBO,MAAAA,GAAG,EAAEN,CAHgB;AAIrBO,MAAAA,MAAM,EAAEL,SAAS,GAAIT,OAAO,GAAG,UAAH,GAAgB,MAA3B,GAAqC;AAJjC,KAAvB;AAOA,WAAOnB,aAAa,CAAC,KAAD,EAAQ;AAC1BM,MAAAA,SAAS,4BAAqBA,SAArB,CADiB;AAE1B4B,MAAAA,GAAG,EAAE,KAAKC,aAFgB;AAG1BC,MAAAA,KAAK,EAAEP,cAHmB;AAI1BQ,MAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWsB;AAJK,KAAR,CAApB;AAMD;;AAvC+D;;gBAA7CxB,M,eACAV,S;;gBADAU,M,kBAEGD,Y","sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {createElement} from 'react';\nimport PropTypes from 'prop-types';\nimport DraggableControl from './draggable-control';\n\nimport type {DraggableControlProps} from './draggable-control';\n\nconst propTypes = Object.assign({}, DraggableControl.propTypes, {\n  // Custom className\n  className: PropTypes.string,\n  // Longitude of the anchor point\n  longitude: PropTypes.number.isRequired,\n  // Latitude of the anchor point\n  latitude: PropTypes.number.isRequired\n});\n\nconst defaultProps = Object.assign({}, DraggableControl.defaultProps, {\n  className: ''\n});\n\nexport type MarkerProps = DraggableControlProps & {\n  className: string,\n  longitude: number,\n  latitude: number\n};\n\n/*\n * PureComponent doesn't update when context changes.\n * The only way is to implement our own shouldComponentUpdate here. Considering\n * the parent component (StaticMap or InteractiveMap) is pure, and map re-render\n * is almost always triggered by a viewport change, we almost definitely need to\n * recalculate the marker's position when the parent re-renders.\n */\nexport default class Marker extends DraggableControl<MarkerProps> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  _getPosition(): [number, number] {\n    const {longitude, latitude, offsetLeft, offsetTop} = this.props;\n    const {dragPos, dragOffset} = this.state;\n\n    // If dragging, just return the current drag position\n    if (dragPos && dragOffset) {\n      return this._getDraggedPosition(dragPos, dragOffset);\n    }\n\n    // Otherwise return the projected lat/lng with offset\n    let [x, y] = this._context.viewport.project([longitude, latitude]);\n    x += offsetLeft;\n    y += offsetTop;\n    return [x, y];\n  }\n\n  _render() {\n    const {className, draggable} = this.props;\n    const {dragPos} = this.state;\n\n    const [x, y] = this._getPosition();\n\n    const containerStyle = {\n      position: 'absolute',\n      left: x,\n      top: y,\n      cursor: draggable ? (dragPos ? 'grabbing' : 'grab') : 'auto'\n    };\n\n    return createElement('div', {\n      className: `mapboxgl-marker ${className}`,\n      ref: this._containerRef,\n      style: containerStyle,\n      children: this.props.children\n    });\n  }\n}\n"],"file":"marker.js"}